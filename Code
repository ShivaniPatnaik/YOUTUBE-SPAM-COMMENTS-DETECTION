import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import missingno as ms
!pip install missingno
train_data = []
data_files = ['Youtube01-Psy.csv','Youtube02-KatyPerry.csv','Youtube03-LMFAO.csv','Youtube04-Eminem.csv','Youtube05-Shakira.csv']
for file in data_files:
    data = pd.read_csv(file)
    train_data.append(data)
train_data = pd.concat(train_data)
train_data.info()
train_data.head()
train_data['CLASS'].value_counts()
def drop_fectures(features,data):
    data.drop(features,axis=1,inplace=True)
drop_fectures(['COMMENT_ID','AUTHOR','DATE'],train_data)
train_data.info()
import re
re.findall("[A-Za-z]+","Hey Ravi57,How are you doing?")
def process_content(content):
    return " ".join(re.findall("[A-Za-z]+",content.lower()))
train_data['processed_content'] = train_data['CONTENT'].apply(process_content)
train_data.head()
drop_fectures(['CONTENT'],train_data)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(train_data[‘processed_content’],train_data[‘CLASS’],test_size=0.2,random_state=57
from sklearn.feature_extraction.text import CountVectorizer
count_vect = CountVectorizer(stop_words='english')
x_train_counts = count_vect.fit_transform(x_train)
x_train_counts.shape
from sklearn.feature_extraction.text import TfidfTransformer
tranformer = TfidfTransformer()
x_train_tfidf = tranformer.fit_transform(x_train_counts)
x_train_tfidf.shape
x_test_counts = count_vect.transform(x_test)
x_test_counts
x_test_tfidf = tranformer.transform(x_test_counts)
x_test_tfidf
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train_tfidf,y_train)
predictions = model.predict(x_test_tfidf)
From sklearn.metrics import confusion_matrix,classification_report,accuracy_score
confusion_matrix(y_test,predictions)
print(classification_report(y_test,predictions))
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(x_train_tfidf,y_train)
predictions = model.predict(x_test_tfidf)
confusion_matrix(y_test,predictions)
print(classification_report(y_test,predictions))
from sklearn.model_selection import GridSearchCV
parameters = {
                     'max_depth' : [1,3,4],
                     'n_estimators': [10,30,50],
                     'max_features': ['sqrt', 'auto', 'log2'],
                     'min_samples_split': [10,20,30],
                     'min_samples_leaf': [1, 3, 10],
                     'bootstrap': [True, False],
                     }
model = GridSearchCV(RandomForestClassifier(),parameters)
model.fit(x_train_tfidf,y_train)
model.best_params_
predictions  = model.predict(x_test_tfidf)
confusion_matrix(y_test,predictions)
print(classification_report(y_test,predictions))
